
/**
 * Write a description of class DesktopBuilder here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class DesktopBuilder{
    
    //desktop parts variables
    private String UserName; //the user's name
    private String brand; //the brand that the user has chosen
    private String tower; //the tower type that the user has chosen
    private String cpu; //the cpu brand that the user has chosen
    private double cpuSpeed; //the cpu speed that the user has chosen
    private double hardDriveCap; //the hard drive capacity that the user has chosen
    private String monitorBrand; //the monitor brand that the user has chosen
    private double monitorSize; //the monitor size that the user has chosen
    private double total = 0.0;
    
    //desktop price variables
    private final double zero = 0.0;
    private final double fifty = 50.0;
    private final double seventy = 70.0;
    private final double oneHundred = 100.0;
    private final double oneHundredFifty = 150.0;
    private final double twoHundred = 200.0;
    private final double twoHundredFifty = 250.0;
    private final double threeHundred = 300.0;
    
    public DesktopBuilder(String name, String brand, String tower){
        this.UserName = name;
        this.brand = brand;
        this.tower = tower;
    }

    public DesktopBuilder(String cpu, String cpuSpeed, String hardDriveCap, String monitorBrand, String monitorSize){
        this.cpu = cpu;
        this.cpuSpeed = Double.parseDouble(cpuSpeed);
        this.hardDriveCap = Double.parseDouble(hardDriveCap);
        this.monitorBrand = monitorBrand;
        this.monitorSize = Double.parseDouble(monitorSize);
    }
   
    private double brandPrice(){
        if (this.brand.equalsIgnoreCase("Dell")){
            this.total += threeHundred;
            return threeHundred;
        }
        else if (this.brand.equalsIgnoreCase("HP")){
            this.total += twoHundredFifty;
            return twoHundredFifty;
        }
        else if (this.brand.equalsIgnoreCase("Lenovo")){
            this.total += twoHundredFifty;
            return twoHundredFifty;
        }
        else{
            System.out.printf("That is not a listed option, please chose again.%n");//this.total += twoHundred; // default brand base
            return zero;
        }
    }
    
    private double towerPrice(){
        if (this.tower.equalsIgnoreCase("Full tower")){
            this.total += oneHundred;
            return oneHundred;
        }
        else if (this.tower.equalsIgnoreCase("Mini tower")){
            this.total += seventy;
            return seventy;
        }
        else{
            System.out.printf("That is not a listed option, please chose again.%n");
            return zero;
        }
    }
    
    private double cpuPrice(String cpu){ //Overloaded constructor
        if (cpu.equalsIgnoreCase("AMD")){
            this.total += oneHundredFifty;
            return oneHundredFifty;
        }
        else if (cpu.equalsIgnoreCase("Intel")){
            this.total += twoHundred;
            return twoHundred;
        }
        else{
            System.out.printf("That is not a listed option, please chose again.%n");
            return zero;
        } 
        
    }
    
    private double cpuPrice(double cpuSpeed){ //Overloaded constructor
        if (cpuSpeed <= 2.0) {
            this.total += fifty;    // very low power CPU speed
            return fifty;
        }   
        else if (cpuSpeed <= 2.5) {
            this.total += seventy;    // entry tier
            return seventy;
        } 
        else if (cpuSpeed <= 3.0) {
            this.total += oneHundredFifty;   // mainstream
            return oneHundredFifty;
        } 
        else if (cpuSpeed <= 3.5) {
            this.total += twoHundred;   // mid-performance
            return twoHundred;
        } 
        else if (cpuSpeed <= 4.0) {
            this.total += twoHundredFifty;   // high-performance
            return twoHundredFifty;
        } 
        else {
            this.total += threeHundred;   // elite
            return threeHundred;
        }
    }
    
    private double hardDriveCapPrice(){
        if (this.hardDriveCap <= 500) {
            this.total += fifty;   
            return fifty;
        } 
        else if (this.hardDriveCap <= 1000) {
            this.total += oneHundred;
            return oneHundred;
        } 
        else if (this.hardDriveCap <= 2000) {
            this.total += oneHundredFifty;  
            return oneHundredFifty;
        } 
        else {
            this.total += twoHundred;
            return twoHundred;
        }
    }
    
    private double monitorBrandPrice(){
        if (this.monitorBrand.equalsIgnoreCase("Samsung")) {
            this.total += oneHundredFifty;   
            return oneHundredFifty;
        } 
        else if (this.monitorBrand.equalsIgnoreCase("LG")) {
            this.total += oneHundred;   
            return oneHundred;
        }  
        else {
            System.out.printf("That is not a listed option, please chose again.%n");
            return zero;
        }
    }
    
    private double monitorSizePrice(){
        if (this.monitorSize <= 24) {
            this.total += oneHundred;   
            return oneHundred;
        } 
        else if (this.monitorSize <= 27) {
            this.total += oneHundredFifty;   
            return oneHundredFifty;
        } 
        else if (this.monitorSize <= 32) {
            this.total += twoHundred;   
            return twoHundred;
        }
        else if (this.monitorSize > 32) {
            this.total += twoHundredFifty;   
            return twoHundredFifty;
        }  
        else {
            System.out.printf("That is not a listed option, please chose again.%n");
            return zero;
        }
    }
    
    private double totalPrice(DesktopBuilder desktop){
        return this.total + desktop.total;
    }
    
    public void printReceipt(String choice){
        // Reset total for fresh calculation

    
        // Indented format strings
        final String IND = "    ";
        final String HEADING_FMT_STR = IND + "%-25s%15s%n";
        final String DATA_FMT_STR    = IND + "%-25s%15.2f%n";
        final String DIVIDER = IND + "------------------------------------------------------------";
    
        // Header (name NOT indented)
        System.out.printf("[%s]%n", this.UserName.toUpperCase());

        //System heading and table header
    
        // -------------------- DESKTOP --------------------
            
        System.out.printf(IND + "%s%n", choice.toLowerCase());
        System.out.println(DIVIDER);
        System.out.printf(HEADING_FMT_STR, "Component", "Price");
            
        //brand of desktop and price
        System.out.printf(DATA_FMT_STR, String.format("Brand(%s)", this.brand), this.brandPrice());
            
        //tower size and price
        System.out.printf(DATA_FMT_STR, String.format("Tower(%s)", this.tower), this.towerPrice());

    }

    public void printReceipt(DesktopBuilder desktop){
        // Reset total for fresh calculation


        // Indented format strings
        final String IND = "    ";
        final String DATA_FMT_STR    = IND + "%-25s%15.2f%n";
        final String DIVIDER = IND + "------------------------------------------------------------";

        //System heading and table header

        // -------------------- DESKTOP --------------------


        //brand of cpu and price using overloaded constructor
        System.out.printf(DATA_FMT_STR, String.format("CPU(%s)", this.cpu), this.cpuPrice(this.cpu));

        //cpu speed and price using overloaded constructor
        System.out.printf(DATA_FMT_STR, String.format("CPU Speed (%.1f GHz)", this.cpuSpeed), this.cpuPrice(this.cpuSpeed));

        //hard drive capacity and price
        System.out.printf(DATA_FMT_STR, String.format("Hard Drive (%.0f GB)", this.hardDriveCap), this.hardDriveCapPrice());

        //brand of monitor and price
        System.out.printf(DATA_FMT_STR, String.format("Monitor Brand(%s)", this.monitorBrand), this.monitorBrandPrice());

        //monitor size and price
        System.out.printf(DATA_FMT_STR, String.format("Monitor Size (%.0f inch)", this.monitorSize), this.monitorSizePrice());

        // Footer
        System.out.println(DIVIDER);
        System.out.printf(IND + "%-25s$%7.2f%n", "Total:", this.totalPrice(desktop));
    }
    
}
